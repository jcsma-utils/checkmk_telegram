#!/usr/bin/env python

# Telegram

# Copyright Mathias Kettner  2013  mk@mathias-kettner.de
#           Stefan Gehn      2016  stefan+cmk@srcxbox.net

# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Telegram notification based on asciimail notification from
# check_mk 1.2.6p16.

import os, re, sys, urllib, urllib2, codecs

### EDITAR AQUI ###
telegram_bot_token = '1042604417:AAHt8wGA-dUO_WcQC_clOKYyCWKO57LBD5U'
idchat = 254042373
####################
# Define log file
log_file = '/omd/sites/vpumonitor/var/log/checkmk_telegram.log'

# Function to log messages
def log_message(message):
    with codecs.open(log_file, 'a',encoding='utf-8') as log:
      log.write(message + '\n')

# Function to replace the character with the word "degrees"
def replace_degree_symbol(text):
    return text.replace(u'\xb0', '')

tmpl_host_text = """*Check_MK: $HOSTNAME$ - $EVENT_TXT$*
```
Host:     $HOSTNAME$
Alias:    $HOSTALIAS$
Address:  $HOSTADDRESS$
Event:    $EVENT_TXT$
Output:   $HOSTOUTPUT$

$LONGHOSTOUTPUT$```"""

tmpl_service_text = """*Check_MK: $HOSTNAME$ - $SERVICEDESC$ $EVENT_TXT$*
```
Host:     $HOSTNAME$
Alias:    $HOSTALIAS$
Address:  $HOSTADDRESS$
Service:  $SERVICEDESC$
Event:    $EVENT_TXT$
Output:   $SERVICEOUTPUT$

$LONGSERVICEOUTPUT$```"""

def substitute_context(template, context):
    #log_message(u"template to be filled={0}".format(template))
    #log_message(u"current context={0}".format(context))
    # First replace all known variables
    for varname, value in context.items():
       # log_message(u"template={0}, varname={1},value={2}".format(template,varname,value).encode('utf-8'))
       # log_message(u"template={0}".format(template))
       # log_message(u"varname={0}".format(varname))
       # log_message(u"value={0}".format(value))
        template = template.replace('$'+varname+'$', value)

#    log_message(u"template_before:{0}".format(template))
    # Remove the rest of the variables and make them empty
    template = re.sub("\$[A-Z_][A-Z_0-9]*\$", "", template)
 #   log_message(u"template_filled:{0}".format(template))
    return template

def construct_message_text(context):
    notification_type = context["NOTIFICATIONTYPE"]
    if notification_type in [ "PROBLEM", "RECOVERY" ]:
        #txt_info = "$PREVIOUS@HARDSHORTSTATE$ -> $@SHORTSTATE$"
         txt_info = "$LAST@SHORTSTATE$ -> $@SHORTSTATE$"
    elif notification_type.startswith("FLAP"):
        if "START" in notification_type:
            txt_info = "Started Flapping"
        else:
            txt_info = "Stopped Flapping ($@SHORTSTATE$)"
    elif notification_type.startswith("DOWNTIME"):
        what = notification_type[8:].title()
        txt_info = "Downtime " + what + " ($@SHORTSTATE$)"
    elif notification_type == "ACKNOWLEDGEMENT":
        txt_info = "Acknowledged ($@SHORTSTATE$)"
    elif notification_type == "CUSTOM":
        txt_info = "Custom Notification ($@SHORTSTATE$)"
    else:
        txt_info = notification_type # Should neven happen

    txt_info = substitute_context(txt_info.replace("@", context["WHAT"]), context)

    context["EVENT_TXT"] = txt_info

    if context['WHAT'] == 'HOST':
        tmpl_text = tmpl_host_text
    else:
        tmpl_text = tmpl_service_text

    #log_message(u"tmpl_text={0}".format(tmpl_text))
    return substitute_context(tmpl_text, context)

def fetch_notification_context():
    context = {}
    for (var, value) in os.environ.items():
        if var.startswith("NOTIFY_"): # all tags/information often start with the pattern "NOTIFY_XXXX"
            context[var[7:]] = value.decode("utf-8")
            #log_message(f"{var[7:]}: {value}")  # Log each context variable
            #log_message("{0}: {1}".format(var, value))  # Log each context variable
    return context

def send_telegram_message(token, chat_id, text):
    text = replace_degree_symbol(text)
    url = 'https://api.telegram.org/bot%s/sendMessage' % (token)
    data = urllib.urlencode({'chat_id':chat_id, 'text':text, 'parse_mode':'Markdown'})
    #log_message("texto enviado: {0}".format(text))
    #print("sending telegram message, url '%s', chat id '%s', text '%s'" % (url, chat_id, text))
    try:
        urllib2.urlopen(url, data).read()
        #log_message(f"Telegram message sent: {response}")
    except urllib2.URLError, e:
        sys.stdout.write('Cannot send Telegram message: HTTP-Error %s %s\n' % (e.code, e))
        #log_message(f'Cannot send Telegram message: HTTP-Error {e.code} {e}')

def main():
    context = fetch_notification_context()
    #log_message("context:{0}".format(context))
    telegram_chatid = idchat
    if not telegram_chatid: # e.g. empty field in user database
        sys.stdout.write("Cannot send Telegram message: Empty destination chat id")
        log_message(u"Cannot send Telegram message")
        sys.exit(2)
    text = construct_message_text(context)
    log_message(u"Message to send:{0}".format(text))
    send_telegram_message(telegram_bot_token, telegram_chatid, text)

main()
